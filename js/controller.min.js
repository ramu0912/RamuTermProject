//controller js
var app = angular.module('App', []);
app.constant('globals', {
    api: 'pankaj',
    fershDeskURL: 'https://insurejoy.freshdesk.com/helpdesk/tickets.json',
    encryptionKey: '9080706050403020',
    encryptionIv: '1020304080706050',
    staticKey: 'IG006072021',
    RedirectURL: "https://qa.indiacover360.com/Application/",
    ServiceURL: "https://apiqa.indiacover360.com",
    IGwServiceURL: "https://apiqa.indiacover360.com",
    UIURL: "https://qa.indiacover360.com/HomePage",
    landingPage: "https://qa.indiacover360.com",
    mainPage: "https://qa.indiacover360.com/Application/?CPID=",
});
app.run(function ($window, $rootScope) {
    $rootScope.online = navigator.onLine;
    $window.addEventListener("offline", function () {
        $rootScope.$apply(function () {
            $rootScope.online = !1
        })
    }, !1);
   
});

app.controller('MainController', ["$scope", "$sce", "$rootScope", "globals", "$http", "CommonService", "$document", "$location", "$timeout", "$window", "$filter", "ValidationFactory", "$interval", function ($scope, $sce, $rootScope, globals, $http, CommonService, $document, $location, $timeout, $window, $filter, ValidationFactory, $interval) {
   
    $scope.genderList = [{ value: 'M', text: 'Male' }, { value: 'F', text: 'Female' }];
    $scope.annualIncomeList = [];
    $scope.termDetails = {
        income: '',
        age:'',
        name: '',
        mobile: '',
        pincode: null,
        gender:'M'
    };
    $scope.errors = {};
    
    $scope.getAge = function (dateString) {
        var today = new Date();
        var tempage = dateString.split("-");
        var birthDate = new Date(parseInt(tempage[2]), (parseInt(tempage[0]) - 1), parseInt(tempage[1]));
        var age = today.getFullYear() - birthDate.getFullYear();
        var m = today.getMonth() - birthDate.getMonth();
        if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {
            age--
        }
        return age
    }
  
    function getincomeList() {
        let count=4;
        for (let i = 400000; i <= 10000000; i = i + 100000) {
            
            if (count < 100) {
                $scope.annualIncomeList.push({ value: i, text: count + ' Lacs' });
            }
            else {
                $scope.annualIncomeList.push({ value: i, text: '1 Crore' });
            }
            count++;
        }
    }
    //$scope.$watch('online', function () {
    //    if (!$rootScope.online) {
    //        $mdToast.show($mdToast.simple().textContent('Uhoh, we\'ve lost you... Please check your connection.').hideDelay(3000).position('top right'))
    //    }
    //});
 
 
  
    $scope.submitleadform = function () {
        if ($scope.userOTP != undefined) {
            $scope.wrongotpmsgshow = !1
        } else {
            $scope.wrongotpmsgshow = !0
        }
        if ($scope.userOTP == undefined || $scope.userOTP == "" || $scope.userOTP == null) {
            $scope.wrongotpmsgshow = !0;
            $scope.wrongotpmsg = "Enter Correct OTP"
        } else {
            $scope.wrongotpmsgshow = !1;
            $scope.leadcreationfn7()
        }
    }

    $scope.otpFn = function (flag,flag1) {

        if (flag == 2) {
            $scope.resendFlag = true;
            $scope.wrongotpmsgshow = false;
            $scope.otpText = "Successfully Re-sent the One Time Password to your mobile number";
        }
        else {
            $scope.resendFlag = false;
            var tempmobile = $scope.termDetails.mobile;
            if (flag1==3)
                $scope.termDetails.mobile = $scope.termDetails.newMobile;
        }
        $scope.errors.mobile = false;
        
        $scope.leadcreaterequestdata.RequestString.LeadCreateRequest.User.UserName = "IGTERM2016";
        $scope.leadcreaterequestdata.RequestString.LeadCreateRequest.User.UserPassword = "IG@TERM@2016";
        $scope.otpcreaterequestdata.RequestString.OTPValidationRequest.User.UserName = "IGTERM2016";
        $scope.otpcreaterequestdata.RequestString.OTPValidationRequest.User.UserPassword = "IG@TERM@2016";
        $scope.leadcreaterequestdata.RequestString.LeadCreateRequest.Products.product[0].productid = 3;
        $scope.otpcreaterequestdata.RequestString.OTPValidationRequest.User.Productid = 3;

        $scope.leadcreaterequestdata.RequestString.LeadCreateRequest.Visitor.leads.lead[0].leadId = $scope.IGQuoteId;


        $scope.leadcreaterequestdata.RequestString.LeadCreateRequest.Visitor.Name = "user";




        $scope.leadcreaterequestdata.RequestString.LeadCreateRequest.Visitor.EmailId = "2018@xyz.com";
        
        $scope.leadcreaterequestdata.RequestString.LeadCreateRequest.Visitor.MobileNo = $scope.termDetails.mobile;
        var resendFlag = CommonService.SendOTPReboot($scope, globals);
        resendFlag.then(function (result) {
            console.log(result);
            var token = result.data.TokenId;
            
            $scope.otpcreaterequestdata.RequestString.OTPValidationRequest.OTPValidation.Tokenid = token;
            $scope.otpcreaterequestdata.RequestString.OTPValidationRequest.OTPValidation.Mobile = $scope.termDetails.mobile;
            $scope.leadcreaterequestdata.RequestString.LeadCreateRequest.Visitor.OriginPageid = 0;

            $scope.leadcreaterequestdata.RequestString.LeadCreateRequest.Visitor.IsCallBackRequire = "false";
           
            if (result.data.IsVerified == true) {

                $scope.leadcreaterequestdata.RequestString.LeadCreateRequest.User.Tokenid = token;
                $scope.leadcreaterequestdata.RequestString.LeadCreateRequest.Visitor.MobileNo = $scope.termDetails.mobile;
                $scope.leadcreationfn4(token);

            }
            else if (result.data.Message == "success") {
                $scope.otpPopup = true;
                $scope.otpMobile = true;
                $scope.updateMobile = false;
                $scope.updateLoader = false;
                $scope.showbtnleadloader = false;
                $scope.errors.mobile = false;
                $scope.errors.newMobile = false;
            }
            else if (result.data.Message == "Proceed to the quotes page without OTP verification") {
                $window.location.href = globals.RedirectURL + "Term?CPID=" + btoa($scope.IGQuoteId)
            }
            else {
                $scope.showbtnleadloader = false;
                $scope.updateLoader = false;
                if (flag1 == 3) {
                    $scope.termDetails.mobile = tempmobile;
                    $scope.errors.newMobile = true;
                    $scope.errors.newMobileMessage = result.data.Message;
                }
                else {
                    $scope.errors.mobileMessage = result.data.Message;
                    $scope.errors.mobile = true;
                }
                    
            }

        }, function () {
            $scope.showbtnleadloader = false;
            $scope.updateLoader = false;
        });
    }
    $scope.leadcreationfn7 = function () {
        $scope.otpcreaterequestdata.RequestString.OTPValidationRequest.OTPValidation.OTP = $scope.userOTP;
        var response = CommonService.GetMobileVerificationWithOTPRequest2($scope.otpcreaterequestdata);
        $scope.otpLoader = true;
        $scope.wrongotpmsgshow = false;
        response.then(function (result) {
            console.log(result);
            result.data = [angular.fromJson(result.data)];
            $scope.leadcreaterequestdata.RequestString.LeadCreateRequest.User.Tokenid = result.data[0].data.Token.Tokenid;
            $scope.leadcreaterequestdata.RequestString.LeadCreateRequest.Visitor.MobileNo = $scope.termDetails.mobile;
            if (result.data[0].data.Error.ErrorCode == 1) {
                $scope.wrongotpmsg = "Enter Correct OTP";
                $scope.wrongotpmsgshow = true;
                $scope.otpLoader = false;

            } else {
                $scope.leadcreationfn4(result.data)
            }
        }, function () {
            $scope.otpLoader =false;
        });
    }
    $scope.leadcreationfn4 = function (value, flag) {
        var response = CommonService.GetMobileVerificationWithOTPRequest1($scope.leadcreaterequestdata);
        response.then(function (result) {
            console.log(result);
            result.data = [angular.fromJson(result.data)];
            if (result.data[0].data.Error.ErrorCode == "0") {
                window.dataLayer = window.dataLayer || [];
                window.dataLayer.push({
                    'event': 'LeadSubmit',
                    'LeadID': $scope.IGQuoteId,
                    'Product': 'Term Insurance'
                });
                $window.location.href = globals.RedirectURL + "Term?CPID=" + btoa($scope.IGQuoteId)
            }
        }, function () {
            $scope.otpLoader = false;
        });
    }

    $scope.calculateAgeInYear = function (insDOB, childDOB) {
        var date1 = new Date(insDOB);
        var date2 = new Date(childDOB);
        var diffDays = parseInt((date2 - date1) / (1000 * 60 * 60 * 24) / 365);
        return Math.abs(diffDays)
    }
  
    $scope.validation = function (id) {
        if (id == 'age') {
            if (!$scope.termDetails.age) {
                $scope.errors.age = true;
                $scope.errors.ageMessage="Age is required."
            }
            else {
                $scope.errors.age = false;
            }
           return $scope.errors.age;
        }
        //else if (id == 'gender') {
        //    if (!$scope.termDetails.gender) {
        //        $scope.errors.gender = true;
        //        $scope.errors.genderMessage = "Gender is required."
        //    }
        //    else {
        //        $scope.errors.gender = false;
        //    }
        //    return $scope.errors.gender;
        //}
        else if (id == 'income') {
            if (!$scope.termDetails.income) {
                $scope.errors.income = true;
                $scope.errors.incomeMessage = "Annual Income is required."
            }
            else {
                $scope.errors.income = false;
                $scope.calculateSumAssuredRange($scope.termDetails.income);
            }
            return $scope.errors.income;
        }
        else if (id == 'city') {
            if (!$scope.termDetails.city) {
                $scope.errors.city = true;
                $scope.errors.cityMessage = "City is required";
            }
            else {
                $scope.errors.city = false;
            }
            return $scope.errors.city;

        }
        //else if (id == 'name') {
        //    if (!$scope.termDetails.name) {
        //        $scope.errors.name = true;
        //        $scope.errors.nameMessage = "Name is required."
        //    }
        //    else {
        //        $scope.errors.name = false;
        //    }
        //    return $scope.errors.name;
        //}
        else if (id == 'mobile') {
            if (!$scope.termDetails.mobile) {
                $scope.errors.mobile = true;
                $scope.errors.mobileMessage = "Mobile No. is required"
            }
            else if (ValidationFactory.mobilevalidate($scope.termDetails.mobile)!='True') {
                $scope.errors.mobile = true;
                $scope.errors.mobileMessage = "Invalid Mobile No."
            }
            else if ($scope.termDetails.mobile.length<10) {
                $scope.errors.mobile = true;
                $scope.errors.mobileMessage = "Mobile no. must be 10 digits."
            }
            else {
                $scope.errors.mobile = false;
            }
            return $scope.errors.mobile;
        }
        else if (id == 'newmobile') {
            if (!$scope.termDetails.newMobile) {
                $scope.errors.newMobile = true;
                $scope.errors.newMobileMessage = "Mobile No. is required"
            }
            else if (ValidationFactory.mobilevalidate($scope.termDetails.newMobile) != 'True') {
                $scope.errors.newMobile = true;
                $scope.errors.newMobileMessage = "Invalid Mobile No."
            }
            else if ($scope.termDetails.newMobile.length < 10) {
                $scope.errors.newMobile = true;
                $scope.errors.newMobileMessage = "Mobile no. must be 10 digits."
            }
            else {
                $scope.errors.newMobile = false;
            }
            return $scope.errors.newMobile;
        }
        //else if (id == 'pincode') {
        //    if (!$scope.termDetails.pincode) {
        //        $scope.errors.pincode = true;
        //        $scope.errors.pincodeMessage = "Pincode is required"
        //    }
        //    else if (parseInt($scope.termDetails.pincode) == 0) {
        //        $scope.errors.pincode = true;
        //        $scope.errors.pincodeMessage = "Invalid pincode"
        //    }
        //    else if ($scope.termDetails.pincode.length < 6) {
        //        $scope.errors.pincode = true;
        //        $scope.errors.pincodeMessage = "Pincode must be 6 digits."
        //    }
        //    else {
        //        $scope.errors.pincode = false;
        //    }
        //    return $scope.errors.pincode;
        //}
       
    }

    $scope.calculateSumAssuredRange = function (useractualincome) {
        if (useractualincome != undefined) {
            $scope.userfloatincome = parseFloat(useractualincome / 100000).toFixed(2);
            $scope.homepageincometext = '';
            $scope.minincome = '';
            $scope.maxincome = '';
            var userincomeinlacs = Math.round($scope.userfloatincome);
            var count = useractualincome.toString().length;
            if (count <= 7) {
                $scope.homepageincometext = parseFloat(useractualincome / 100000).toFixed(2) + ' Lacs'
            }
            //else {
            //    $scope.annualerror = !0
            //}
            //if ($scope.userfloatincome < 1.0) {
            //    $scope.annualerror = !0
            //} else if ($scope.userfloatincome > 100.0) {
            //    $scope.annualerror = !0
            //} else {
            //    $scope.annualerror = !1
            //}
            if (userincomeinlacs >= 0 && userincomeinlacs <= 3) {
                $scope.minincome = 0;
                $scope.maxincome = 3
            } else if (userincomeinlacs >= 3 && userincomeinlacs <= 4) {
                $scope.minincome = 3;
                $scope.maxincome = 4
            } else if (userincomeinlacs >= 4 && userincomeinlacs <= 7) {
                $scope.minincome = 4;
                $scope.maxincome = 7
            } else if (userincomeinlacs >= 7 && userincomeinlacs <= 10) {
                $scope.minincome = 7;
                $scope.maxincome = 10
            } else if (userincomeinlacs >= 10 && userincomeinlacs <= 15) {
                $scope.minincome = 10;
                $scope.maxincome = 15
            } else if (userincomeinlacs >= 15) {
                $scope.minincome = 15;
                $scope.maxincome = 20
            }
        }
        return $scope
    }
    $scope.gettermcontinuepop = function () {

        var flag = 0;
        $scope.product = "Term";

        if ($scope.validation('income')) {
            flag = 1;
        }
        if ($scope.validation('age')) {
            flag = 1;
        }
        if ($scope.validation('city')) {
            flag = 1;
        }
        //if ($scope.validation('pincode')) {
        //    flag = 1;
        //}
        //if ($scope.validation('name')) {
        //    flag = 1;
        //}
        if ($scope.validation('mobile')) {
            flag = 1;
        }
   
        if (flag == 0) {
            $scope.userOTP = '';
            $scope.otpText = "Successfully sent the One Time Password to your mobile number";
            //$mixpanel.track('LP Form Submitted', { "UtmSource": $scope.utmsourcedata, "Age": $scope.ModelAge, "Gender": $scope.gender, "Mobile": $scope.termDetails.mobile });
            var userincomeinlacs = parseFloat(($scope.termDetails.income / 100000).toFixed(0) * 100000);
            if (userincomeinlacs > 2500000) {
                $scope.SumAssured = 50000000
            }
            else {

                if ($scope.termDetails.age <= 39) {
                    $scope.SumAssured = userincomeinlacs * 20
                } else if ($scope.termDetails.age >= 40 && $scope.termDetails.age <= 50) {
                    $scope.SumAssured = userincomeinlacs * 15
                } else if ($scope.termDetails.age >= 51 && $scope.termDetails.age <= 55) {
                    $scope.SumAssured = userincomeinlacs * 10
                } else {
                    $scope.SumAssured = userincomeinlacs * 5
                }
            }
            $scope.showbtnleadloader = true;
            var saveRequirementData = CommonService.saveNewTermRequirementData($scope, globals);
            saveRequirementData.then(function (pl) {

                $scope.IGQuoteId = JSON.parse(angular.toJson(pl.data.IGQuoteId));
                if ($scope.IGQuoteId > 0) {
                    $scope.otpFn();
             
                }
            }, function () {
                $scope.showbtnleadloader = false;
            });
        }
    }
    $scope.updateMobileNumber = function () {
   
        if (!$scope.validation('newmobile')) {
            $scope.updateLoader = true;
            $scope.otpFn(1,3);
        }
            
    }
    $scope.init = function () {

        var currentURL = $location.absUrl();

        if (currentURL.indexOf("dev.indiacover360.com") != -1) {
            globals.RedirectURL = "https://dev.indiacover360.com/Application/";
            globals.ServiceURL = "https://api.indiacover360.com";
            globals.IGwServiceURL = "https://api.indiacover360.com";
            globals.UIURL = "https://dev.indiacover360.com/HomePage";
            globals.landingPage = "https://dev.indiacover360.com";
            globals.mainPage = "https://dev.indiacover360.com/Application/?CPID=";
        }
        else if (currentURL.indexOf("qa.indiacover360.com") != -1) {
            globals.RedirectURL = "https://qa.indiacover360.com/Application/";
            globals.ServiceURL = "https://apiqa.indiacover360.com";
            globals.IGwServiceURL = "https://apiqa.indiacover360.com";
            globals.UIURL = "https://qa.indiacover360.com/HomePage";
            globals.landingPage = "https://qa.indiacover360.com";
            globals.mainPage = "https://qa.indiacover360.com/Application/?CPID=";
        }
        else if (currentURL.indexOf("insurejoy.com") != -1 || currentURL.indexOf("insurejoy.in") != -1) {
            globals.RedirectURL = "https://www.insurejoy.com/Application/";
            globals.ServiceURL = "https://api.insurejoy.com";
            globals.IGwServiceURL = "https://api.insurejoy.com";
            globals.UIURL = "https://www.insurejoy.com/HomePage";
            globals.landingPage = "https://www.insurejoy.com";
            globals.mainPage = "https://www.insurejoy.com/Application/?CPID=";
        }


        commoncity();

        $scope.otpPopup = false;
        $scope.otpMobile = false;
        $scope.updateMobile = false;
        getincomeList();
        getAgeList(28, 65);
        $scope.carquotesleadrequest = ValidationFactory.GetEncryptedString();
        $scope.leadcreaterequestdata = ValidationFactory.GetLeadCreationEncryptedString();
        $scope.otpcreaterequestdata = ValidationFactory.GetOTPString1();
        var currentURL = $location.absUrl();
        CommonService.IGVisiterClickCount(currentURL);
      
        
        $scope.webUrl = $location.absUrl();
        var sourcevia = document.referrer;
        if ($scope.webUrl.indexOf("enhance") != -1 && $scope.webUrl.indexOf("child") != -1) {
            if (sourcevia.indexOf("google") != -1 || sourcevia.indexOf("yahoo") != -1 || sourcevia.indexOf("bing") != -1) {
                $scope.utmsourcedata = "organic";
                $scope.utmcampaigndata = "organic";
            }
        }
      
        var temp1 = $scope.webUrl.split("#")[0].split('&');
        console.log($location.absUrl());
        for (var i = 0; i < temp1.length; i++) {
            if (temp1[i].indexOf("utm_source") != -1) {
                $scope.utmsourcedata = temp1[i].split('=')[1]
            }
            if (temp1[i].indexOf("utm_medium") != -1) {
                $scope.utmmediumdata = temp1[i].split('=')[1]
            }
            if (temp1[i].indexOf("utm_campaign") != -1) {
                $scope.utmcampaigndata = temp1[i].split('=')[1]
            }
            if (temp1[i].indexOf("utm_term") != -1) {
                $scope.utmtermdata = temp1[i].split('=')[1]
            }
            if (temp1[i].indexOf("partnerleadid") != -1) {
                $scope.utmpartnerleadiddata = temp1[i].split('=')[1]
            }
            if (temp1[i].indexOf("partneragentid") != -1) {
                $scope.utmpartneragentiddata = temp1[i].split('=')[1]
            }
        }

    }

    function getAgeList(start, end) {
        $scope.ageList = [];
        for (let i = start; i <= end; i++) {
            $scope.ageList.push({ value: i, text: i + ' Years' });
        }
    }
    $scope.encryptedData = function (value) {
        if (value) {
            const encrypted = CryptoJS.AES.encrypt(CryptoJS.enc.Utf8.parse(value + globals.staticKey), CryptoJS.enc.Utf8.parse(globals.encryptionKey),
                {
                    keySize: 128 / 8,
                    iv: CryptoJS.enc.Utf8.parse(globals.encryptionIv),
                    mode: CryptoJS.mode.CBC,
                    padding: CryptoJS.pad.Pkcs7
                });
            return encrypted.toString();
        }
    }
    function commoncity(flag) {
        $scope.CityValue = false;
        $scope.citylisttemp = CommonService.citylist($scope, globals);
        $scope.citylisttemp.then(function (result) {
            console.log("Cities List");
            console.log(result);
            result.data = [angular.fromJson(result.data)];
            console.log(result);
            var commoncitylist11 = result.data[0];
            console.log(commoncitylist11);
            $scope.commoncitystate = [];
            for (var i = 0; i < commoncitylist11.length; i++) {
                var temp = { cityid: commoncitylist11[i].CityId, cityname: commoncitylist11[i].City + ", " + commoncitylist11[i].State, cityCategory: commoncitylist11[i].CityCategory };
                $scope.commoncitystate.push(temp);
            }
            var cities = $filter('orderBy')($scope.commoncitystate, 'cityname');
            $scope.commoncitystate = cities;

        });

    }
}])

//service js
var app = angular.module('App');
app.service('CommonService', function ($location, $filter, $http, globals) {
    'use strict';
    var CommonService = {};
    CommonService.formatReg = function (registrationNo) {
        var regNo = registrationNo;
        regNo = regNo.replace(/-/g, "");
        var regNoArray = new Array(4);
        regNoArray[0] = regNo.slice(0, 2);
        regNoArray[1] = '';
        regNoArray[2] = '';
        regNoArray[3] = '';
        try {
            if (!isNaN(regNo.slice(2, 4))) {
                regNoArray[1] = regNo.slice(2, 4);
            } else {
                if (!isNaN(regNo.slice(2, 3))) {
                    regNoArray[1] = regNo.slice(2, 3);
                }
                if (isNaN(regNo.slice(3, 4))) {
                    regNoArray[2] = regNo.slice(3, 4);
                }
            }
            if (!isNaN(regNo.slice(4, 8))) {
                regNoArray[3] = regNoArray[3] + regNo.slice(4, 8);
            } else {
                regNoArray[2] = regNoArray[2] + regNo.slice(4, 5);
                if (isNaN(regNo.slice(5, 6)) == true && isNaN(regNo.slice(6, 7)) == true) {
                    regNoArray[2] = regNoArray[2] + regNo.slice(5, 7);
                } else {
                    if (isNaN(regNo.slice(5, 6))) {
                        regNoArray[2] = regNoArray[2] + regNo.slice(5, 6);
                    } else {
                        regNoArray[3] = regNoArray[3] + regNo.slice(5, 6);
                    }
                    if (!isNaN(regNo.slice(6, 7))) {
                        regNoArray[3] = regNoArray[3] + regNo.slice(6, 7);
                    }
                }
                if (!isNaN(regNo.slice(7, 11))) {
                    regNoArray[3] = regNoArray[3] + regNo.slice(7, 11);
                }
            }
        } catch (e) { }
        return regNoArray.join('-').replace(/--/g, "-").replace(/-\s*$/, "").replace(/[^- 0-9 a-z A-z]/g, "");
    };
    CommonService.insurancecompanies = function (data) {
        var request = $http({
            method: "POST",
            url: globals.IGwServiceURL + "/EPGeneralServices.svc/web/GetInsurer",
            headers: {
                'Content-Type': 'application/json; charset=utf-8'
            },
            dataType: "json",
            data: JSON.stringify({
                "RequestString": data
            })
        });
        return request;
    };

    CommonService.SendOTPReboot = function ($scope) {
        var mbl = $scope.termDetails.mobile;
        var vData = {
            "IsResend": $scope.resendFlag,
            "MobileNumber": mbl,
            "CP_ID": $scope.IGQuoteId,
            "ClientKey": $scope.encryptedData($scope.IGQuoteId.toString() + mbl)
        }
        var request = $http({
            method: "POST",
            dataType: "json",
            url: globals.ServiceURL + "/Lead.svc/web/SendOTPReboot",
            contentType: "application/json; charset=utf-8",
            data: JSON.stringify(vData)
        });
        return request;
    };
    CommonService.citylist = function ($scope) {
        var vData = {
            IsTopLocation: $scope.CityValue
        };
        var request = $http({
            method: "POST",
            dataType: "json",
            url: globals.ServiceURL + '/MasterService.svc/web/GetCityList',
            contentType: "application/json; charset=utf-8",
            data: JSON.stringify(vData)
        });
        return request;
    };
    CommonService.getCountrylist = function () {
        var request = $http({
            method: "POST",
            url: globals.ServiceURL + '/MasterService.svc/web/GetCountryList',
        });
        return request;
    };
    CommonService.setsessionvariable = function (key, data) {
        var vData = {
            type: "Set",
            key: 0,
            sessionValue: JSON.stringify(data, null, "")
        };
        var request = $http({
            method: "POST",
            dataType: 'jsonp',
            url: globals.IGwServiceURL + "/IGPolicyServices.svc/web/SetSession",
            data: JSON.stringify(vData)
        });
        return request;
    };
    CommonService.getCPIDdata = function (data) {
        var requestdata = parseInt(data);
        var request = $http({
            method: "POST",
            url: globals.ServiceURL + "/Lead.svc/web/GetContinueJourneyDetails",
            contentType: "application/json",
            dataType: "json",
            data: requestdata
        });
        return request;
    };
    CommonService.saveChildRequirementData = function ($scope, globals) {
        var requestdata = {
            "IGQuoteId": 0,
            "IsDnc": true,
            "PartnerAgentId": $scope.utmpartneragentiddata,
            "LandingURL": $scope.webUrl,
            "PartnerLeadId": $scope.utmpartnerleadiddata,
            "RequestType": "",
            "Requests": [{
                "__type": "NonTermRequest:#ServiceEntities",
                "DOBs": [JSON.parse(CommonService.stringifyWcf($scope.formdob, 1)), JSON.parse(CommonService.stringifyWcf($scope.childDOB, 1))],
                "Features": [{
                    "__type": "BooleanFeature:#ServiceEntities",
                    "Id": "0",
                    "Name": ""
                }, {
                    "__type": "BooleanFeature:#ServiceEntities",
                    "Id": "0",
                    "Name": ""
                }],
                "Amount": $scope.selectedincome,
                "PayingMode": $scope.childincometype,
                "MaturityTerm": $scope.MaturityTerm,
                "Gender": $scope.formgender,
                "CityId": 3035,
                "MinRisk": 1,
                "MaxRisk": 5,
                "ProductId": 7,
                "MaturityType": "HistoricalGrowth",
                "PaymentDuration": 0
            }],
            "ServiceTimeOut": "2147483647",
            "utmMedium": $scope.utmmediumdata,
            "utmCompaign": $scope.utmcampaigndata,
            "utmSource": $scope.utmsourcedata,
            "utmTerm": $scope.utmtermdata
        };
        var request = $http({
            method: "POST",
            dataType: "jsonp",
            url: globals.ServiceURL + "/QuoteService.svc/web/Save",
            data: requestdata
        });
        return request;
    };
    CommonService.saveNewTermRequirementData = function ($scope, globals) {
        if ($scope.utmmediumdata == undefined || $scope.utmmediumdata == null) {
            $scope.utmmediumdata = ""
        }
        if ($scope.utmcampaigndata == undefined || $scope.utmcampaigndata == null) {
            $scope.utmcampaigndata = ""
        }
        if ($scope.utmsourcedata == undefined || $scope.utmsourcedata == null) {
            $scope.utmsourcedata = ""
        }
        if ($scope.UtmTerm == undefined || $scope.UtmTerm == null) {
            $scope.UtmTerm = ""
        }
       
        var requestdata = {
            "IGQuoteId": 0,
            "IsDnc": !0,
            "PartnerAgentId": "",
            "LandingURL": $scope.webUrl,
            "MobileNo": $scope.termDetails.mobile,
            //"Email": $scope.termDetails.email,
            //"Pincode": $scope.termDetails.pincode,
            "PartnerLeadId": "",
            "RequestType": "",
            "Requests": [{
                "__type": "TermRequest:#ServiceEntities",
                "Features": null,
                "ProductId": 3,
                "AnnualIncomeRange": $scope.termDetails.income,
                "PayingMode": 'Yearly',
                "PolicyTerm": 0,
                "SelectedRiders": [],
                "SumAssured": $scope.SumAssured,
                "UserInputIncome": parseInt($scope.termDetails.income),
                "MinAnnualIncomeRange": $scope.minincome,
                "MaxAnnualIncomeRange": $scope.maxincome,
                "Features": null,
                "Age": $scope.termDetails.age,
                "CityID": parseInt($scope.termDetails.city),
                "CityId": parseInt($scope.termDetails.city),
            }],
            "ServiceTimeOut": 2147483647,
            "utmMedium": $scope.utmmediumdata,
            "utmCompaign": $scope.utmcampaigndata,
            "utmSource": $scope.utmsourcedata,
            "utmTerm": $scope.utmtermdata
        };
        $scope.TermRequestData = requestdata;
        var request = $http({
            method: "POST",
            dataType: "jsonp",
            url: globals.ServiceURL + "/QuoteService.svc/web/Save",
            data: requestdata
        });
        return request
    };
    CommonService.GetMobileVerificationWithOTPRequest = function (data) {
        var requestdata = {
            RequestString: JSON.stringify(data.RequestString, null, "    ")
        };
        var request = $http({
            method: "POST",
            dataType: "jsonp",
            url: globals.IGwServiceURL + "/Lead.svc/web/GetMobileVerificationWithOTPRequest",
            data: JSON.stringify(requestdata)
        });
        return request;
    };
    CommonService.GetMobileVerificationWithOTPRequest1 = function (data) {
        var requestdata = {
            RequestString: JSON.stringify(data.RequestString, null, "    ")
        };
        var request = $http({
            method: "POST",
            dataType: "jsonp",
            url: globals.IGwServiceURL + "/Lead.svc/web/GetLeadCreateRequest",
            data: JSON.stringify(requestdata)
        });
        return request;
    };
    CommonService.GetMobileVerificationWithOTPRequest2 = function (data) {
        var requestdata = {
            RequestString: JSON.stringify(data.RequestString, null, "    ")
        };
        var request = $http({
            method: "POST",
            dataType: "jsonp",
            url: globals.IGwServiceURL + "/Lead.svc/web/GetOTPVerificationRequest",
            data: JSON.stringify(requestdata)
        });
        return request;
    }

    CommonService.IGVisiterClickCount = function (url) {

        var vData = { "IGURL": url }

        var request = $http({
            method: "POST",
            dataType: "json",
            url: globals.IGwServiceURL + "/CommonService.svc/web/IGVisiterClickCount",
            contentType: "application/json; charset=utf-8",
            data: JSON.stringify(vData)
        });
        return request;

    };


    CommonService.stringifyWcf = function (json, flag) {
        var reISO = /^(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2}(?:\.\d*)?)Z$/;
        var reMsAjax = /^\/Date\((d|-|.*)\)[\/|\\]$/;
        return JSON.stringify(json, function (key, value1) {
            debugger;
            var value;
            if (typeof value1 == "string") {
                if (flag == 1) {
                    value = value1.split('-')[1] + '-' + value1.split('-')[0] + '-' + value1.split('-')[2];
                } else if (flag == 3) {
                    value = value1.split('/')[0] + '-' + value1.split('/')[1] + '-' + value1.split('/')[2];
                } else {
                    value = value1.split('-')[1] + '-' + value1.split('-')[0] + '-' + value1.split('-')[2];
                }
                value1 = new Date(value);
                if (isNaN(Date.parse(value1))) {
                    var splitdata = value.split('-');
                    value = new Date(splitdata[2], splitdata[0] - 1, (splitdata[1]));
                } else {
                    value = new Date(value)
                }
                value = value.setDate(value.getDate() + 1);
                var s = JSON.parse(JSON.stringify(new Date(value)));
                var a = reISO.exec(s);
                if (a) {
                    var val = '/Date(' + new Date(Date.UTC(+a[1], +a[2] - 1, +a[3], +a[4], +a[5], +a[6])).getTime() + ')/';
                    this[key] = val;
                    return val;
                }
            }
            return value;
        })
    }
    return CommonService;
});

//directive
app.directive('mdBlur', function ($timeout) {
    var directive = {
        restrict: 'A',
        link: function (scope, element, attributes) {
            $timeout(function () {
                angular.element(element[0].querySelector("select.md-input")).bind("blur", function () {
                    $timeout(function () {
                        scope.$eval(attributes.mdBlur);
                    }, 100);
                });
            }, 0);
        }
    };
    return directive;
});
app.directive("scrollBottom", function () {
    return {
        link: function (scope, element, attr) {
            var $id = $("#" + attr.scrollBottom);
            $(element).on("click", function () {
                $id.scrollTop($id[0].scrollHeight);
            });
        }
    }
});
app.filter('startsWithLetter', function () {
    return function (items, letter) {
        var filtered = [];

        if (letter != undefined) {
            var letterMatch = new RegExp(letter, 'i');
            var letterlength = letter.length;
            for (var i = 0; i < items.length; i++) {
                var item = items[i];
                if (letterMatch.test(item.ActualIncomeText.substring(0, letterlength))) {
                    filtered.push(item);
                }
            }
            return filtered;
        }
        else
            return items;
    };
});

app.directive('alphabetOnly', function () {
    return {
        require: 'ngModel',
        link: function (scope, element, attr, ngModelCtrl) {
            function fromUser(text) {
                if (text) {
                    text = text.toString();
                    var transformedInput = text.replace(/[^a-zA-Z]/g, '');
                    if (transformedInput !== text) {
                        ngModelCtrl.$setViewValue(transformedInput);
                        ngModelCtrl.$render()
                    }
                    return transformedInput
                }
                return undefined
            }
            ngModelCtrl.$parsers.push(fromUser)
        }
    }
});

app.directive('alphabetSpace', function () {
    return {
        require: 'ngModel',
        link: function (scope, element, attr, ngModelCtrl) {
            function fromUser(text) {
                if (text) {
                    text = text.toString();
                    var transformedInput = text.replace(/[^a-zA-Z\s]/g, '');
                    if (transformedInput !== text) {
                        ngModelCtrl.$setViewValue(transformedInput);
                        ngModelCtrl.$render()
                    }
                    return transformedInput
                }
                return undefined
            }
            ngModelCtrl.$parsers.push(fromUser)
        }
    }
});

app.directive('numbersOnly', function () {
    return {
        require: 'ngModel',
        link: function (scope, element, attr, ngModelCtrl) {
            function fromUser(text) {
                if (text) {
                    text = text.toString();
                    var transformedInput = text.replace(/[^0-9]/g, '');

                    if (transformedInput !== text) {
                        ngModelCtrl.$setViewValue(transformedInput);
                        ngModelCtrl.$render();
                    }
                    return transformedInput;
                }
                return undefined;
            }
            ngModelCtrl.$parsers.push(fromUser);
        }
    };
});
app.filter('startsWithLetter1', function () {
    return function (items, letter) {
        var filtered = [];
        if (letter != undefined) {
            var letterMatch = new RegExp(letter, 'i');
            var letterlength = letter.length;
            for (var i = 0; i < items.length; i++) {
                var item = items[i];
                if (letterMatch.test(item.CityStateName.substring(0, letterlength))) {
                    filtered.push(item);
                }
            }
            for (var i = 0; i < items.length; i++) {
                var item3 = items[i];
                var item1 = item3.CityStateName.split(',');
                var item2 = item1[0];
                if (letterMatch.test(item2.substring(0, item2.length))) {
                    if (filtered.indexOf(item3) == -1)
                        filtered.push(item3);
                }
            }
            return filtered;
        }
        else
            return items;
    };
});

app.filter('SearchWithLetter', function () {
    return function (items, letter) {
        var filtered = [];
        var letterMatch = new RegExp(letter, 'i');
        for (var i = 0; i < items.length; i++) {
            var item = items[i];
            if (letterMatch.test(item.CityStateName)) {
                filtered.push(item);
            }
        }
        return filtered;
    };
});

app.directive('focusMe', ['$timeout', '$parse', function ($timeout, $parse) {
    return {
        //scope: true,   // optionally create a child scope
        link: function (scope, element, attrs) {
            var model = $parse(attrs.focusMe);
            scope.$watch(model, function (value) {
                console.log('value=', value);
                if (value === true) {
                    $timeout(function () {
                        element[0].focus();
                    });
                }
            });
            // to address @blesh's comment, set attribute value to 'false'
            // on blur event:
            element.bind('blur', function () {
                console.log('blur');
                scope.$apply(model.assign(scope, false));
            });
        }
    };
} ]);

app.filter('roundof', function ($filter) {
    return function (input) {

        return Math.round(input);
    };
});
app.filter('freeaddon', function ($filter) {
    return function (input) {

        if (parseInt(input) == 0) {
            var input = "Free";
        }
        return input;
    };
});

app.filter('trim', function () {
    return function (value) {
        if (!angular.isString(value)) {
            return value;
        }
        return value.replace(/[\s]/g, '');
    };
});

app.filter('rupeesFigure', function () {
    return function (income) {
        if (!isNaN(income) && angular.isNumber(income)) {
            var userfloatincome = '';
            var count = (parseInt(income)).toString().length;
            if (count < 4) {
                userfloatincome = parseFloat(income / 1000).toFixed(2) + ' K*';
            }
            else if (count == 4 || count == 5) {
                userfloatincome = parseFloat(income / 1000).toFixed(2) + ' K*';
            }
            else if (count == 6 || count == 7) {
                userfloatincome = parseFloat(income / 100000).toFixed(2) + ' Lacs*';
            }
            else if (count == 8 || count == 9) {
                userfloatincome = parseFloat(income / 10000000).toFixed(2) + ' Crore*';
            }
            return userfloatincome;
        }
        else {
            return;
        }

    };
});

app.directive('ngEnter', function () {
    return function (scope, element, attrs) {
        element.bind("keydown keypress", function (event) {
            if (event.which === 13) {
                scope.$apply(function () {
                    scope.$eval(attrs.ngEnter, { 'event': event });
                });
                event.preventDefault();
            }
        });
    };
});

app.filter('INR', function () {
    return function (input) {
        if (!isNaN(input)) {
            //var currencySymbol = '₹';
            //var output = Number(input).toLocaleString('en-IN');   <-- This method is not working fine in all browsers!           
            var result = input.toString().split('.');

            var lastThree = result[0].substring(result[0].length - 3);
            var otherNumbers = result[0].substring(0, result[0].length - 3);
            if (otherNumbers != '')
                lastThree = ',' + lastThree;
            var output = otherNumbers.replace(/\B(?=(\d{2})+(?!\d))/g, ",") + lastThree;

            if (result.length > 1) {
                output += "." + result[1];
            }

            //return currencySymbol + output;
            return output;
        }
    }
});


app.directive('commaseparator', function ($filter) {
    return {
        require: 'ngModel',
        link: function (scope, elem, attrs, ctrl) {
            if (!ctrl) {
                return;
            }
            ctrl.$formatters.unshift(function () {
                return $filter('commainr')(ctrl.$modelValue);
            });
            ctrl.$parsers.unshift(function (viewValue) {
                var plainNumber = viewValue.replace(/[\,\.\-\+]/g, ''),
                    b = $filter('commainr')(plainNumber);
                elem.val(b);
                return plainNumber;
            });
        }
    };
});
app.filter('commainr', function () {
    return function (input) {
        if (!isNaN(input) && input != undefined && input != null) {
            var result = input.toString();
            var lastThree = result.substring(result.length - 3);
            var otherNumbers = result.substring(0, result.length - 3);
            if (otherNumbers != '')
                lastThree = ',' + lastThree;
            var output = otherNumbers.replace(/\B(?=(\d{2})+(?!\d))/g, ",") + lastThree;

            return output
        }
    }
});


//validation factory js
app.factory('ValidationFactory',function(){return{GetOTPString1:function()
    {var leadrequest={"RequestString":{"OTPValidationRequest":{"User":{"UserName":"123","UserPassword":"123","UserIP":"192.168.1.129","Vendorid":"2018","Productid":"3"},"OTPValidation":{"Mobile":"9873008200","OTP":"4073","Tokenid":"WIN-I2MHQOTJM4B6df1875a-c2a4-46e0-8d68-0a889c269359"}}}};return leadrequest;},GetEncryptedString:function()
    {var bikeleadrequest={"RequestString":{"MobileValidationRequest":{"User":{"UserName":"123","UserPassword":"123","UserIP":"192.168.1.129","Vendorid":"2018","Productid":"8"},"MobileValidation":{"Mobile":undefined,"isOTPRequire":"No","isOTPRequireForValidMobile":"No"}}}};return bikeleadrequest;},GetLeadCreationEncryptedString:function()
    {var bikeleadrequest={"RequestString":{"LeadCreateRequest":{"User":{"UserName":"123","UserPassword":"123","UserIP":"192.168.1.129","Vendorid":2018,"Tokenid":"8a748771-574b-48b2-a113-ecb85bb3593f"},"Products":{"product":[{"productid":8}]},"Visitor":{"leads":{"lead":[{"leadId":""}]},"Name":"","EmailId":"","MobileNo":"","CountryCode":"+91","IsCallBackRequire":"false","OriginPageid":"2"}}}};return bikeleadrequest;},mobilevalidate:function(mobile){var reg=/^([0|\+[0-9]{1,5})?([1-9][0-9]{9})$/;if(mobile!=undefined&&mobile.toString().length==10&&reg.test(mobile)){var msgMobile="True";}
    else{var msgMobile="False";}
    return msgMobile;},emailvalidate:function(email){var reg=/^([A-Za-z0-9_\-\.])+\@([A-Za-z0-9_\-\.])+\.([A-Za-z]{2,4})$/;if(email!=undefined&&email.length!=4&&reg.test(email)){var msgEmail="True";}
    else{var msgEmail="False";}
    return msgEmail;},descriptionvalidate:function(text){var regex=/[^\w\s]/gi;if(text!=undefined&&text!=""&&!regex.test(text)){var msgText="True";}
    else{var msgText="False";}
    return msgText;},namevalidate:function(name){var regex=/^[a-zA-Z\s]*$/
    if((name!=undefined)&&(name!="")&&(regex.test(name))){var msgName="True";}
    else{var msgName="False";}
    return msgName;},onlynumber:function(number){var reg=/[^0-9]+/g;if((number!=undefined)&&(!reg.test(number))){var msgNumber="True";}
    else{var msgNumber="False";}
    return msgNumber;},nospacevalidate:function(nospace){var reg=/\s/g;if((nospace!=undefined)&&(!reg.test(nospace))){var magNoSpace="True";}
    else{var magNoSpace="False";}
    return magNoSpace;},required:function(txt){var reg=/\s/g;if((txt!=undefined)&&(txt!="")){var msgRequired="True";}
    else{var msgRequired="False";}
    return msgRequired;},validatepancard:function(pancard){var regex=/^[a-zA-Z'.\\s]{1,40}$/;if((pancard!=undefined)&&(regex.test(pancard))){var msgName="True";}
    else{var msgName="False";}
    return msgName;},AgeGroup:function(datediif){var userdatearray=datediif.split('-');var d1=new Date(userdatearray[1]+"/"+userdatearray[0]+"/"+userdatearray[2]);d2=new Date();if(d2<d1){var diff=monthDiff(d2,d1);if(diff==0)
    return 0;else
    return-diff;}
            var years = d2.getFullYear() - d1.getFullYear(); var months = d2.getMonth() - d1.getMonth(); var days = (d2.getDate() - d1.getDate()) / 30; return years * 12 + months + days;
        },
    }
    });
    